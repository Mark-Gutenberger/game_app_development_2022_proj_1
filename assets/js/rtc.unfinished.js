// Generated by CoffeeScript 2.6.1
/*
SPDX-License-Identifier: MIT
Author: Mark Gutenberger <mark-gutenberger@outlook.com>
trc.coffee (c) 2022
Desc: description
Created:  2022-03-07T14:13:31.387Z
Modified: 2022-03-11T15:03:19.408Z
*/
import h from './helpers.js';

window.addEventListener('load', () => {
	return function () {
		var commElem,
			i,
			j,
			len,
			mediaRecorder,
			mirrorMode,
			myStream,
			pc,
			randomNumber,
			recordedStream,
			ref,
			room,
			screen,
			socket,
			socketId,
			username;
		room = h.getQString(location.href, 'room');
		username = sessionStorage.getItem('username');
		if (!room) {
			return document.querySelector('#room-create').attributes.removeNamedItem('hidden');
		} else if (!username) {
			return document.querySelector('#username-set').attributes.removeNamedItem('hidden');
		} else {
			commElem = document.getElementsByClassName('room-comm');
			ref = commElem.length(i++);
			for (j = 0, len = ref.length; j < len; j++) {
				i = ref[j];
				commElem[i].attributes.removeNamedItem('hidden');
			}
			//endfor
			pc = [];
			socket = io('/stream');
			socketId = '';
			randomNumber = `__${h.generateRandomString()}__${h.generateRandomString()}__`;
			myStream = '';
			screen = '';
			recordedStream = [];
			mediaRecorder = '';
			getAndSetUserStream();
			socket.on('connect', () => {
				return function () {
					socketId = socket.io.engine.id;
					randomNumber = document.getElementById('randomNumber').innerText;
					socket.emit('subscribe', {
						room: room,
						socketId: socketId,
					});
					socket.on('new user', (data) => {
						return function () {
							socket.emit('newUserStart', {
								to: data.socketId,
								sender: socketId,
							});
							pc.push(data.socketId);
							return init(true, data.socketId);
						};
					});
					//endfunc
					socket.on('newUserStart', (data) => {
						return function () {
							pc.push(data.sender);
							return init(false, data.sender);
						};
					});
					//endfunc
					socket.on('ice candidates', (data) => {
						return async function () {
							var ref1;
							return (ref1 = data.candidate) != null
								? ref1
								: await pc[data.sender].addIceCandidate(new RTCIceCandidate(data.candidate))('');
						};
					});
					//endfunc
					socket.on('sdp', (data) => {
						return async function () {
							var ref1;
							if (data.description.type === 'offer') {
								if ((ref1 = data.description) != null) {
									ref1;
								} else {
									await pc[data.sender].setRemoteDescription(new RTCSessionDescription(data.description))(
										''
									);
								}
								return h
									.getUserFullMedia()
									.then((stream) => {
										return async function () {
											var answer;
											if (!document.getElementById('local').srcObject) {
												h.setLocalStream(stream);
											}
											//endif

											//save my stream
											myStream = stream;
											stream.getTracks().forEach((track) => {
												return function () {
													return pc[data.sender].addTrack(track, stream);
												};
											});
											//endfunc
											answer = await pc[data.sender].createAnswer();
											await pc[data.sender].setLocalDescription(answer);
											return socket.emit('sdp', {
												description: pc[data.sender].localDescription,
												to: data.sender,
												sender: socketId,
											});
										};
										//endfunc
									})
									.catch((e) => {
										return function () {
											return console.error(e);
										};
									});
								//endfunc
							} else if (data.description.type === 'answer') {
								return await pc[data.sender].setRemoteDescription(
									new RTCSessionDescription(data.description)
								);
							}
						};
					});
					//endif
					//endfunc
					return socket.on('chat', (data) => {
						return function () {
							return h.addChat(data, 'remote');
						};
					});
				};
			});
			//endfunc
			//endfunc
			getAndSetUserStream()(function () {
				return h
					.getUserFullMedia()
					.then((stream) => {
						return function () {
							myStream = stream;
							return h.setLocalStream(stream);
						};
						//endfunc
					})
					.catch((e) => {
						return function () {
							return console.error(`stream error: ${e}`);
						};
					});
			});
			//endfunc
			//endfunc
			sendMsg(msg)(function () {
				var data;
				data = {
					room: room,
					msg: msg,
					sender: `${username} (${randomNumber})`,
				};
				socket.emit('chat', data);
				return h.addChat(data, 'local');
			});
			init(
				createOffer,
				partnerName
			)(function () {
				pc[partnerName] = new RTCPeerConnection(h.getIceServer());
				if (screen && screen.getTracks().length) {
					screen.getTracks().forEach((track) => {
						return function () {
							return pc[partnerName].addTrack(track, screen); //should trigger negotiationneeded event
						};
					});
				} else if (myStream) {
					myStream.getTracks().forEach((track) => {
						return function () {
							return pc[partnerName].addTrack(track, myStream); //should trigger negotiationneeded event
						};
					});
				} else {
					h.getUserFullMedia()
						.then((stream) => {
							return function () {
								//save my stream
								myStream = stream;
								stream.getTracks().forEach((track) => {
									return function () {
										return pc[partnerName].addTrack(track, stream); //should trigger negotiationneeded event
									};
								});
								return h.setLocalStream(stream);
							};
						})
						.catch((e) => {
							return function () {
								return console.error(`stream error: ${e}`);
							};
						});
				}
				//endif
				if (createOffer) {
					pc[partnerName].onnegotiationneeded = () => {
						return async function () {
							var offer;
							offer = await pc[partnerName].createOffer();
							await pc[partnerName].setLocalDescription(offer);
							return socket.emit('sdp', {
								description: pc[partnerName].localDescription,
								to: partnerName,
								sender: socketId,
							});
						};
					};
				}
				//endfunc
				//endif
				pc[partnerName].onicecandidate = ({ candidate }) => {
					return function () {
						return socket.emit('ice candidates', {
							candidate: candidate,
							to: partnerName,
							sender: socketId,
						});
					};
				};
				//endfunc
				pc[partnerName].ontrack = (e) => {
					return function () {
						var cardDiv, controlDiv, newVid, str;
						str = e.streams[0];
						if (document.getElementById(`${partnerName}-video`)) {
							return (document.getElementById(`${partnerName}-video`).srcObject = str);
						} else {
							//video elem
							newVid = document.createElement('video');
							newVid.id = `${partnerName}-video`;
							newVid.srcObject = str;
							newVid.autoplay = true;
							newVid.className = 'remote-video';
							controlDiv = document.createElement('div');
							controlDiv.className = 'remote-video-controls';
							controlDiv.innerHTML = `<i class="fa fa-microphone text-white pr-3 mute-remote-mic" title="Mute"></i>
<i class="fa fa-expand text-white expand-remote-video" title="Expand"></i>`;
							cardDiv = document.createElement('div');
							cardDiv.className = 'card card-sm';
							cardDiv.id = partnerName;
							cardDiv.appendChild(newVid);
							cardDiv.appendChild(controlDiv);
							document.getElementById('videos').appendChild(cardDiv);
							return h.adjustVideoElemSize();
						}
					};
				};
				//endif
				//endfunc
				pc[partnerName].onconnectionstatechange = (d) => {
					return function () {
						switch (pc[partnerName].iceConnectionState) {
							case 'disconnected':
								return h.closeVideo(partnerName);
							case 'failed':
								return h.closeVideo(partnerName);
							case 'closed':
								return h.closeVideo(partnerName);
						}
					};
				};
				//endswitch
				//endfunc
				return (pc[partnerName].onsignalingstatechange = (d) => {
					return function () {
						switch (pc[partnerName].signalingState) {
							case 'closed':
								return () => {
									return function () {
										console.log("Signalling state is 'closed'");
										return h.closeVideo(partnerName);
									};
								};
						}
					};
				});
			});
			//endswitch
			//endfunc
			// endfunc
			shareScreen()(function () {
				return h
					.shareScreen()
					.then((stream) => {
						return function () {
							h.toggleShareIcons(true);
							h.toggleVideoBtnDisabled(true);
							screen = stream;
							broadcastNewTracks(stream, 'video', false);
							return screen.getVideoTracks()[0].addEventListener('ended', () => {
								return function () {
									return stopSharingScreen();
								};
							});
						};
					})
					.catch((e) => {
						return function () {
							return console.error(e);
						};
					});
			});
			//endfunc
			stopSharingScreen()(function () {
				//enable video toggle btn
				h.toggleVideoBtnDisabled(false);
				return new Promise((res, rej) => {
					return function () {
						var ref1;
						if ((ref1 = screen.getTracks().length) != null) {
							ref1;
						} else {
							screen.getTracks().forEach((track) => {
								return function () {
									return track.stop()('');
								};
							});
						}
						//endfunc
						return res();
					};
					//endfunc
				})
					.then(() => {
						return function () {
							h.toggleShareIcons(false);
							return broadcastNewTracks(myStream, 'video');
						};
						//endfunc
					})
					.catch((e) => {
						return function () {
							return console.error(e);
						};
					});
			});
			//endfunc
			//endfunc
			//endfunc
			broadcastNewTracks(
				stream,
				type,
				(mirrorMode = true)
			)(function () {
				var k, len1, p, pName, ref1, results, track;
				h.setLocalStream(stream, mirrorMode);
				track = (ref1 = type === 'audio') != null ? ref1 : stream.getAudioTracks()[0] && stream.getVideoTracks()[0];
				results = [];
				for (k = 0, len1 = pc.length; k < len1; k++) {
					p = pc[k];
					pName = pc[p];
					if (typeof pc[pName] === 'object') {
						results.push(h.replaceTrack(track, pc[pName]));
					} else {
						results.push(void 0);
					}
				}
				return results;
			});
			//endif
			//endfor
			//endfunc
			toggleRecordingIcons(isRecording)(function () {
				var e;
				e = document.getElementById('record');
				if (isRecording) {
					e.setAttribute('title', 'Stop recording');
					e.children[0].classList.add('text-danger');
					return e.children[0].classList.remove('text-white');
				} else {
					e.setAttribute('title', 'Record');
					e.children[0].classList.add('text-white');
					return e.children[0].classList.remove('text-danger');
				}
			});
			//endif
			//endfunc
			startRecording(stream)(function () {
				mediaRecorder = new MediaRecorder(stream, {
					mimeType: 'video/webm;codecs=vp9',
				});
				mediaRecorder.start(1000);
				toggleRecordingIcons(true);
				mediaRecorder.ondataavailable = function (e) {
					return recordedStream.push(e.data);
				};
				//endfunc
				mediaRecorder.onstop = function () {
					toggleRecordingIcons(false);
					h.saveRecordedStream(recordedStream, username);
					return setTimeout(() => {
						return function () {
							return (recordedStream = []);
						};
					});
				};
				//endfunc
				return (mediaRecorder.onerror = function (e) {
					return console.error(e);
				});
			});
			//endfunc
			//endfunc

			//Chat textarea
			document.getElementById('chat-input').addEventListener('keypress', (e) => {
				return function () {
					if (e.which === 13 && e.target.value.trim()) {
						e.preventDefault();
						sendMsg(e.target.value);
						return setTimeout(() => {
							return function () {
								return (e.target.value = '');
							};
						});
					}
				};
			});
			//endif
			//endfunc

			//When the video icon is clicked
			document.getElementById('toggle-video').addEventListener('click', (e) => {
				return function () {
					var elem;
					e.preventDefault();
					elem = document.getElementById('toggle-video');
					if (myStream.getVideoTracks()[0].enabled) {
						e.target.classList.remove('fa-video');
						e.target.classList.add('fa-video-slash');
						elem.setAttribute('title', 'Show Video');
						myStream.getVideoTracks()[0].enabled = false;
					} else {
						e.target.classList.remove('fa-video-slash');
						e.target.classList.add('fa-video');
						elem.setAttribute('title', 'Hide Video');
						myStream.getVideoTracks()[0].enabled = true;
					}
					//endif
					return broadcastNewTracks(myStream, 'video');
				};
			});
			//endfunc
			document.getElementById('toggle-mute').addEventListener('click', (e) => {
				return function () {
					var elem;
					e.preventDefault();
					elem = document.getElementById('toggle-mute');
					if (myStream.getAudioTracks()[0].enabled) {
						e.target.classList.remove('fa-microphone-alt');
						e.target.classList.add('fa-microphone-alt-slash');
						elem.setAttribute('title', 'Unmute');
						myStream.getAudioTracks()[0].enabled = false;
					} else {
						e.target.classList.remove('fa-microphone-alt-slash');
						e.target.classList.add('fa-microphone-alt');
						elem.setAttribute('title', 'Mute');
						myStream.getAudioTracks()[0].enabled = true;
					}
					//endif
					return broadcastNewTracks(myStream, 'audio');
				};
			});
			//endfunc
			document.getElementById('share-screen').addEventListener('click', (e) => {
				return function () {
					e.preventDefault();
					if (screen && screen.getVideoTracks().length && screen.getVideoTracks()[0].readyState !== 'ended') {
						return stopSharingScreen();
					} else {
						return shareScreen();
					}
				};
			});
			//endif
			//endfunc
			document.getElementById('record').addEventListener('click', (e) => {
				return function () {
					if (!mediaRecorder || mediaRecorder.state === 'inactive') {
						return h.toggleModal('recording-options-modal', true);
					} else if (mediaRecorder.state === 'paused') {
						return mediaRecorder.resume();
					} else if (mediaRecorder.state === 'recording') {
						return mediaRecorder.stop();
					}
				};
			});
			//endif
			//endfunc
			document.getElementById('record-screen').addEventListener('click', () => {
				return function () {
					h.toggleModal('recording-options-modal', false);
					if (screen && screen.getVideoTracks().length) {
						return startRecording(screen);
					} else {
						return h
							.shareScreen()
							.then((screenStream) => {
								return function () {
									return startRecording(screenStream);
								};
								//endfunc
							})
							.catch(() => {
								return function () {};
							});
					}
				};
			});
			//endif
			//endfunc
			return document.getElementById('record-video').addEventListener('click', () => {
				return function () {
					h.toggleModal('recording-options-modal', false);
					if (myStream && myStream.getTracks().length) {
						return startRecording(myStream);
					} else {
						return h
							.getUserFullMedia()
							.then((videoStream) => {
								return function () {
									return startRecording(videoStream);
								};
								//endfunc
							})
							.catch(() => {
								return function () {};
							});
					}
				};
			});
		}
	};
});

//endif
//endfunc
//endif
//endif
//endfunc

//# sourceMappingURL=rtc.unfinished.js.map
